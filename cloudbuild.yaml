# This Cloud Build pipeline builds and deploys the three portfolio microservices.
# It is designed to be triggered by a push to the main branch on GitHub.

steps:
  # 1. Build and push the projects-api image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Projects API'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/projects-api:$SHORT_SHA'
      - './projects-api'
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Projects API'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/projects-api:$SHORT_SHA'

  # 2. Build and push the image-api image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Image API'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/images-api:$SHORT_SHA'
      - './images-api'
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Image API'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/images-api:$SHORT_SHA'

  # 3. Deploy the projects-api service. It depends on the DB credentials.
  # This service is internal-only (--no-allow-unauthenticated).
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Projects API'
    waitFor: ['Push Projects API']
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'projects-api'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/projects-api:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      #- '--no-allow-unauthenticated'
      - '--add-cloudsql-instances'
      - '${_INSTANCE_CONNECTION_NAME}'
      - '--set-env-vars'
      - 'INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME},DB_USER=${_DB_USER},DB_PASS=${_DB_PASS},DB_NAME=${_DB_NAME}'

  # 4. Deploy the image-api service.
  # This service is also internal-only.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Image API'
    waitFor: ['Push Image API']
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'images-api'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/images-api:$SHORT_SHA'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
     # - '--no-allow-unauthenticated'
      - '--set-env-vars'
      - 'BUCKET_NAME=${_BUCKET_NAME}'

  # 5. Build and push the frontend image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Frontend'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/frontend-service:$SHORT_SHA'
      - './frontend-service'
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Frontend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/frontend-service:$SHORT_SHA'

  # 6. Deploy the frontend service. This is the final, public-facing step.
  # It depends on the backend APIs being deployed first so we can inject their URLs.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Frontend'
    waitFor: ['Deploy Projects API', 'Deploy Image API', 'Push Frontend']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        PROJECTS_API_URL=$$(gcloud run services describe projects-api --platform=managed --region=${_REGION} --format='value(status.url)') && \
        IMAGE_API_URL=$$(gcloud run services describe images-api --platform=managed --region=${_REGION} --format='value(status.url)') && \
        gcloud run deploy frontend-service \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/frontend-service:$SHORT_SHA \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="PROJECTS_API_URL=$$PROJECTS_API_URL,IMAGE_SERVICE_URL=$$IMAGE_API_URL"

# Push all images to Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/projects-api:$SHORT_SHA'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/images-api:$SHORT_SHA'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/portfolio-repo/frontend-service:$SHORT_SHA'
options:
  logging: CLOUD_LOGGING_ONLY
